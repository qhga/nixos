#!/usr/bin/env sh
pushd $HOME/.dotfiles > /dev/null
if [ "$1" == "switch" ]; then
    echo "HAVE YOU STAGED NEW FILES/FOLDERS?"
    echo "SWITCHING to new generation"
    # sudo nixos-rebuild switch -I nixos-config=./system/configuration.nix
    time sudo nixos-rebuild switch --flake .#
elif [ "$1" == "switch" ]; then
    echo "HAVE YOU STAGED NEW FILES/FOLDERS?"
    echo "BUILDING new generation"
    # sudo nixos-rebuild build -I nixos-config=./system/configuration.nix
    time sudo nixos-rebuild build --flake .#
elif [ "$1" == "update" ]; then
    [ -z "$2" ] && echo "Missing 2nd argument: pnt update {all|input_name}" && exit
    if [ "$2" == "all" ]; then
        sudo nix flake update .#
    else
        sudo nix flake lock --update-input "$2"
    fi
elif [ "$1" == "list" ]; then
    sudo nix-env --list-generations --profile /nix/var/nix/profiles/system
elif [ "$1" == "ref" ]; then
    [ -z "$2" ] && echo "Missing 2nd argument: pnt ref {binary} [-v]" && exit
    echo "REFERENCES:"
    nix-store -q --references `which $2`
    echo "REFERRER:"
    nix-store -q --referrers `which $2`
    echo "RECURSIVE DEPENDENCIES"
    if [ "$3" == "-v" ]; then
        nix-store -q --tree `which $2`
    fi
elif [ "$1" == "dir" ]; then
    [ -z "$2" ] && echo "Missing 2nd argument: pnt dir {binary}" && exit
    realpath `which $2`
elif [ "$1" == "rm" ]; then
    [ -z "$2" ] && echo "Missing 2nd argument: pnt rm {binary}" && exit
    path=$(realpath `which $2`)
    echo "REMOVING: $path"
    echo "You have to uninstall the package first (remove from configuration.nix)"
    nix-store --delete $path
elif [ "$1" == "gc" ]; then
    nix-store --gc
else
    echo '
Usage: pnt OPTION
  switch                       Switch to the new generation
  build                        Build the new generation (but do not switch)
  update {all|INPUT_NAME}      Update all or a specific input of the flake
  list                         List all available generations
  ref BINARY [-v]              Show the refs of the binary and binaries that ref it
  dir BINARY                   Show the nix-store directory of the binary
  rm BINARY                    Remove the directory of the binary (del lines from config first & switch)
  gc                           Run the garbage collection for the nix-store
'
fi
popd > /dev/null
